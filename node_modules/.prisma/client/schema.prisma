// Configurația Prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelul pentru utilizatori
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  password     String
  name         String
  businessName String?

  // Abonament
  subscriptionPlan      String   @default("free") // free, basic, premium, enterprise
  subscriptionStatus    String   @default("active") // active, cancelled, expired
  subscriptionExpiresAt DateTime
  stripeCustomerId      String?
  stripeSubscriptionId  String?

  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relații
  usage             Usage[]
  apiCalls          ApiCall[]
  businessProfile   BusinessProfile?
  responseTemplates ResponseTemplate[]

  @@map("users")
}

// Modelul pentru profilul de business
model BusinessProfile {
  id                  String  @id @default(cuid())
  userId              String  @unique
  businessType        String // restaurant, hotel, medical, retail, beauty, automotive
  businessName        String
  description         String?
  brandVoice          String  @default("professional") // formal, casual, friendly, professional, luxury
  responseLength      String  @default("medium") // short, medium, long
  specialInstructions String?
  customKeywords      String? // JSON string cu cuvinte cheie custom

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relații
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_profiles")
}

// Modelul pentru template-uri de răspuns
model ResponseTemplate {
  id          String  @id @default(cuid())
  userId      String
  name        String
  category    String // positive, negative, neutral, custom
  template    String // Template-ul cu placeholdere {businessName}, {specificMention}, etc.
  description String?
  isActive    Boolean @default(true)
  usageCount  Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relații
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("response_templates")
}

// Modelul pentru utilizarea lunară
model Usage {
  id           String @id @default(cuid())
  userId       String
  month        Int
  year         Int
  requestCount Int    @default(0)

  // Relații
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Index compus pentru căutări rapide
  @@unique([userId, month, year])
  @@map("usage")
}

// Modelul pentru logarea apelurilor API
model ApiCall {
  id     String @id @default(cuid())
  userId String

  // Detalii cerere
  reviewText   String
  responseText String
  language     String
  tone         String
  model        String  @default("gpt-4")
  businessType String? // tipul de business folosit
  templateId   String? // template-ul folosit dacă este cazul

  // Metadata
  tokensUsed   Int?
  cost         Float? // în USD
  duration     Int? // în milisecunde
  success      Boolean @default(true)
  errorMessage String?

  createdAt DateTime @default(now())

  // Relații
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_calls")
}

// Modelul pentru feedback utilizatori
model Feedback {
  id      String  @id @default(cuid())
  email   String?
  subject String
  message String
  type    String  @default("general") // bug, feature, general
  status  String  @default("open") // open, in_progress, closed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedback")
}

// Modelul pentru setările sistem
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String

  updatedAt DateTime @updatedAt

  @@map("system_settings")
}
