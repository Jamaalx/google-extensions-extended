// Updated schema.prisma for freemium model

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  password              String
  name                  String
  businessName          String?
  
  // Account status
  isActive              Boolean  @default(true)
  emailVerified         Boolean  @default(false)
  verificationToken     String?
  
  // Subscription
  subscriptionPlan      String   @default("free") // free, basic, premium, enterprise
  subscriptionStatus    String   @default("active") // active, cancelled, expired, past_due
  subscriptionExpiresAt DateTime @default(now())
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  
  // Usage limits per plan
  monthlyLimit          Int      @default(10) // free = 10, basic = 100, premium = 500, enterprise = -1
  
  // Metadata
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lastLoginAt           DateTime?
  
  // Relations
  usage                 Usage[]
  apiCalls              ApiCall[]
  businessProfile       BusinessProfile?
  responseTemplates     ResponseTemplate[]
  
  @@map("users")
}

model Usage {
  id           String @id @default(cuid())
  userId       String
  month        Int
  year         Int
  requestCount Int    @default(0)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, month, year])
  @@map("usage")
}

model BusinessProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique
  businessType         String   @default("general")
  businessName         String
  description          String?
  brandVoice           String   @default("professional")
  responseLength       String   @default("medium")
  specialInstructions  String?
  customKeywords       String?
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("business_profiles")
}

model ResponseTemplate {
  id          String   @id @default(cuid())
  userId      String
  name        String
  category    String
  template    String
  description String?
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("response_templates")
}

model ApiCall {
  id              String   @id @default(cuid())
  userId          String
  
  reviewText      String
  responseText    String
  language        String   @default("en")
  tone            String   @default("professional")
  model           String   @default("gpt-4")
  businessType    String?
  templateId      String?
  
  tokensUsed      Int?
  cost            Float?
  duration        Int?
  success         Boolean  @default(true)
  errorMessage    String?
  
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_calls")
}

model Feedback {
  id          String   @id @default(cuid())
  email       String?
  subject     String
  message     String
  type        String   @default("general")
  status      String   @default("open")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("feedback")
}

model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
}